{# This file compiles to README.md -#}
This is a Docker project for building / serving a site based on web-jekyll-base.

# Testing with Docker

This project uses Docker Toolbox to create virtual machines for testing with Docker.

## Installing Docker Toolbox

Development currently requires:

- Docker Toolbox {{ local.docker_toolbox.version }}

  Note we are using this version due to a potential bug in 1.12.5, which is unable to mount volumes on Windows.

  [https://github.com/docker/toolbox/issues/607](https://github.com/docker/toolbox/issues/607)

  {% set install_params_docker_toolbox = {} -%}
  {%- for version_available in readme.docker_toolbox_versions -%}
    {%- if version_available.version == local.docker_toolbox.version -%}
      {%- set install_params_docker_toolbox = install_params_docker_toolbox.update(version_available) -%}
    {%- endif -%}
  {%- endfor -%}

  Installation on Windows:

  [{{ install_params_docker_toolbox.windows.installer_url }}]({{ install_params_docker_toolbox.windows.installer_url }})

  During installation:

  - On 'Select Destination Location':

  Set an installation path of {{ install_params_docker_toolbox.windows.install_path }}.

  - On 'Select Components':

  Uncheck 'Kitematic for Windows'.

## Creating a Virtual Environment and Installing Dependencies

  {% set install_params_python = {} -%}
  {%- for version_available in readme.python_versions -%}
    {%- if version_available.version == local.python.version -%}
      {%- set install_params_python = install_params_python.update(version_available) -%}
    {%- endif -%}
  {%- endfor -%}

All Python work should be done within a virtual environment, to avoid dependency conflicts.

Create the virtual environment. From the working directory of our project (e.g., `{{ readme.working_directory }}`):

    {{ install_params_python.install_path }}\python.exe -m venv {{ install_params_python.virtual_environment_name }}

This will create a directory for the virtual environment (e.g., `{{ readme.working_directory }}\{{ install_params_python.virtual_environment_name }}\`).

Next activate that virtual environment and install our Python dependencies:

    {{ install_params_python.virtual_environment_name }}\Scripts\activate.bat
    pip install -r {{ install_params_python.requirements_name }}

## Starting Docker Containers and Running Tests

If it is not already active, you need to re-activate the virtual environment.
From the working directory of our project (e.g., `{{ readme.working_directory }}`):

    {{ install_params_python.virtual_environment_name }}\Scripts\activate.bat

To start Docker containers:

    invoke docker_start

To start a console in the Docker virtual machine:

    invoke docker_console

To run tests, assuming Docker containers have been started:

    nosetests
{# This comment gives us a newline at the end of the generated file #}
